version: '3.8'

services:
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - user-service
      - property-service
      - investment-service
      - payment-service
      - notification-service
      - postgres

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  property-service:
    build:
      context: ./property-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  investment-service:
    build:
      context: ./investment-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
    depends_on:
      - postgres

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ssaproject
      POSTGRES_PASSWORD: ssapassword
      POSTGRES_DB: ssa
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ssaproject" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres-data: